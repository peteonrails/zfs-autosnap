#!/bin/bash
# author: Peter Jackson
# Adapted from content created for timeshift-autosnap by Marko Gobin, Matti Hyttinen, et al.

[ $(findmnt / -no fstype) == "overlay" ] && { echo "==> skipping zfs-autosnap because system is booted in Live CD mode..."; exit 0; }
[[ -v SKIP_AUTOSNAP ]] && { echo "==> skipping zfs-autosnap due SKIP_AUTOSNAP environment variable being set."; exit 0; }

readonly CONF_FILE=/etc/zfs/zfs-autosnap.conf
readonly SNAPSHOTS_TO_DELETE=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)
readonly SNAPSHOT_NAME_DATE_PATTERN="[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}"

get_property() {
    if [ ! -f $CONF_FILE ]; then
        echo "$CONF_FILE not found! Using $1=$3" >&2;
        param_value=$3
    else
        param_value=`sed '/^\#/d' $CONF_FILE | grep $1 | tail -n 1 |\
        cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'`

        if ([ "$2" == "boolean" ] && [ "$param_value" != true ] && [ "$param_value" != false ]) || \
           ([ "$2" == "integer" ] && [[ ! "$param_value" =~ ^[-+]?([1-9][[:digit:]]*|1)$ ]]) || \
           ([ "$2" == "string" ] && [ "$param_value" == "" ]) ; then
            echo "Wrong paramater in $CONF_FILE. Using $1=$3" >&2
            param_value=$3
        fi
    fi

    echo $param_value
}

if $(get_property "skipAutosnap" "boolean" "false") ; then
    echo "==> skipping zfs-autosnap due skipAutosnap in $CONF_FILE set to TRUE." >&2; exit 0;
fi

readonly SNAPSHOT_DESCRIPTION=$(get_property "snapshotDescription" "string" "sysupdate")
readonly SNAPSHOT_NAME=`date +autosnap_%Y-%m-%d_%H:%M:%S_${SNAPSHOT_DESCRIPTION}`
rpool=$(get_property "rpool" "string" "rpool/root")


echo "Capturing ${rpool}@${SNAPSHOT_NAME}"
zfs snapshot -r ${rpool}@${SNAPSHOT_NAME} || { echo "Unable to run zfs-autosnap! Script will now exit..." >&2; exit 1; }

if $(get_property "deleteSnapshots" "boolean" "true") ; then
    zfs list -t snapshot -r ${rpool} > $SNAPSHOTS_TO_DELETE
    sed -ni "s/\(autosnap_${SNAPSHOT_NAME_DATE_PATTERN}_${SNAPSHOT_DESCRIPTION}\).*$/\1/p" $SNAPSHOTS_TO_DELETE

    count=$(($(sed -n '$=' $SNAPSHOTS_TO_DELETE)-$(get_property "maxSnapshots" "integer" "3")))

    if [ "$count" -gt 0 ] ; then
        sed -i $(($count))q $SNAPSHOTS_TO_DELETE

        for snapshot in $(cat $SNAPSHOTS_TO_DELETE); do
            echo "cleaning up $snapshot"
	   zfs destroy $snapshot
        done
    fi
fi;

exit 0